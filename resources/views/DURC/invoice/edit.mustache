
{{#has_session_status}}
<div class='alert alert-info' role='alert'>
  {{session_status}}
</div>
{{/has_session_status}}

<div id='delete-success-alert' class='alert alert-success' role='alert' style='display: none;'>
                You have successfully deleted this record. This was a hard delete, no going back. But you can save again if you want..
            </div>

{{#is_new}}
<form action='/DURC/invoice' method='POST'>
{{/is_new}}

{{^is_new}}
<form action='/DURC/invoice/{{id}}' method='POST'>
    <input type='hidden' name='_method' value='PUT'>
{{/is_new}}

	<h1>invoice</h1>
<div class='card'>
  <div class='card-header'>
<h4> {{durc_instance_name}}</h4>
<ul>
<li> <a href='/Zermelo/DURC_invoice/'>Return to invoice list</a> </li>
{{^is_new}}
<li> <a href='/DURC/invoice/create'>Create new invoice </a> </li>
{{/is_new}}
</ul>
  </div>
<div class='card-body'>

  <fieldset>
    <legend>Edit {{durc_instance_name}}  </legend>
	<input type='hidden' name='_token' value='{{csrf_token}}'>
	
  <div class='form-group row {{id_row_class}}'>
    <label for='id' class='col-sm-4 col-form-label'>id</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.id.has_errors}}is-invalid{{/errors.id.has_errors}}' id='id' name='id' placeholder='' value='{{id}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.id.messages}}<li>{{.}}</li>{{/errors.id.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{order_id_row_class}}'>
    <label for='order_id' class='col-sm-4 col-form-label'>order_id</label>
    <div class='col-sm-7'>
	Current id value: {{order_id}} (see below for lookup value)<br>
	<select class='select2_order_id form-control' id='order_id' name='order_id'  >
	<option value='{{order_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('order_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#order_id option:selected');
    const orderId = element.val();
    let orderIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/order/' + orderId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        orderIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_order_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/order',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-order_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('order_id');
        if (orderIdHasError === true) {
            $('#select2-order_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{invoiceDate_row_class}}'>
    <label for='invoiceDate' class='col-sm-4 col-form-label'>invoiceDate</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.invoiceDate.has_errors}}is-invalid{{/errors.invoiceDate.has_errors}}' id='invoiceDate' name='invoiceDate' placeholder='current_timestamp()' value='{{invoiceDate}}' >

<button type='button' class='btn btn-primary' id='invoiceDate_FontPicker'>
<img src='/css/ic_today_black_24dp_1x.png'> 
</button>
<button type='button' class='btn btn-primary' id='invoiceDate_TodayNow'> Today and Now</button>
<div class='invalid-feedback'>
  <ul>
  {{#errors.invoiceDate.messages}}<li>{{.}}</li>{{/errors.invoiceDate.messages}}
  </ul>
</div><script>
	var invoiceDateConv = new AnyTime.Converter({format: '%Y-%m-%d %T'});
  	$('#invoiceDate_TodayNow').click( function(e) {
      		$('#invoiceDate').val(invoiceDateConv.format(new Date())).change(); } );

    	$('#invoiceDate_FontPicker').click(
      		function(e) {
        		$('#invoiceDate').AnyTime_noPicker().AnyTime_picker(
				{
    					format: '%Y-%m-%d %T',
    					formatUtcOffset: '%: (%@)'
				} 
			).focus();
        	e.preventDefault();
        	} );
</script>

    </div></div>
  <div class='form-group row {{dueDate_row_class}}'>
    <label for='dueDate' class='col-sm-4 col-form-label'>dueDate</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.dueDate.has_errors}}is-invalid{{/errors.dueDate.has_errors}}' id='dueDate' name='dueDate' placeholder='NULL' value='{{dueDate}}' >

<button type='button' class='btn btn-primary' id='dueDate_FontPicker'>
<img src='/css/ic_today_black_24dp_1x.png'> 
</button>
<button type='button' class='btn btn-primary' id='dueDate_TodayNow'> Today and Now</button>
<div class='invalid-feedback'>
  <ul>
  {{#errors.dueDate.messages}}<li>{{.}}</li>{{/errors.dueDate.messages}}
  </ul>
</div><script>
	var dueDateConv = new AnyTime.Converter({format: '%Y-%m-%d %T'});
  	$('#dueDate_TodayNow').click( function(e) {
      		$('#dueDate').val(dueDateConv.format(new Date())).change(); } );

    	$('#dueDate_FontPicker').click(
      		function(e) {
        		$('#dueDate').AnyTime_noPicker().AnyTime_picker(
				{
    					format: '%Y-%m-%d %T',
    					formatUtcOffset: '%: (%@)'
				} 
			).focus();
        	e.preventDefault();
        	} );
</script>

    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='dueDate' name='dueDateNull' id='dueDateNull' value='dueDateNull' {{dueDate_checked}}>
                    <label class='form-check-label' for='dueDateNull'>null</label>
                </div></div>
  <div class='form-group row {{tax_row_class}}'>
    <label for='tax' class='col-sm-4 col-form-label'>tax</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.tax.has_errors}}is-invalid{{/errors.tax.has_errors}}' id='tax' name='tax' placeholder='0.0000' value='{{tax}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.tax.messages}}<li>{{.}}</li>{{/errors.tax.messages}}
          </ul>
       </div>
    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='tax' name='taxNull' id='taxNull' value='taxNull' {{tax_checked}}>
                    <label class='form-check-label' for='taxNull'>null</label>
                </div></div>
  <div class='form-group row {{shipping_row_class}}'>
    <label for='shipping' class='col-sm-4 col-form-label'>shipping</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.shipping.has_errors}}is-invalid{{/errors.shipping.has_errors}}' id='shipping' name='shipping' placeholder='0.0000' value='{{shipping}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.shipping.messages}}<li>{{.}}</li>{{/errors.shipping.messages}}
          </ul>
       </div>
    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='shipping' name='shippingNull' id='shippingNull' value='shippingNull' {{shipping_checked}}>
                    <label class='form-check-label' for='shippingNull'>null</label>
                </div></div>
  <div class='form-group row {{amountDue_row_class}}'>
    <label for='amountDue' class='col-sm-4 col-form-label'>amountDue</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.amountDue.has_errors}}is-invalid{{/errors.amountDue.has_errors}}' id='amountDue' name='amountDue' placeholder='0.0000' value='{{amountDue}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.amountDue.messages}}<li>{{.}}</li>{{/errors.amountDue.messages}}
          </ul>
       </div>
    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='amountDue' name='amountDueNull' id='amountDueNull' value='amountDueNull' {{amountDue_checked}}>
                    <label class='form-check-label' for='amountDueNull'>null</label>
                </div></div>
  <div class='form-group row'>
    <div class='col-sm-8'>
      <button type='submit' class='btn btn-primary'>Save Data</button>
    </div>
  </div>

</fieldset>
</div></div>
</form>
<br>
  <div class='form-group row'>
              <div class='col-sm-12 text-right'>

<form action='/DURC/invoice/{{id}}' method='POST'>
    	<input type='hidden' name='_method' value='DELETE'>
	<input type='hidden' name='_token' value='{{csrf_token}}'>

              <button type='button' data-id='{{id}}' data-controller='invoice' class='do-soft-delete btn btn-outline-danger'>Hard Delete invoice</button>
</form>
              </div>
            </div>


<br>
<div class='card'>
  <div class='card-header'>
    Belongs To Relationships
  </div>
<div class='card-body'>

<div class='card'>
  <div class='card-header'>
    order ( <a href='/DURC/order/'>see all</a> )
{{^order}}
(no values)
{{/order}}
  </div>
<div class='card-body'>
<table id='table_order' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> id </th>
			<th> employee_id </th>
			<th> customer_id </th>
			<th> orderDate </th>
			<th> shippedDate </th>
			<th> shipper_id </th>
			<th> shipName </th>
			<th> shipAddress </th>
			<th> shipCity </th>
			<th> shipStateProvince </th>
			<th> shipZipPostalCode </th>
			<th> shipCountryRegion </th>
			<th> shippingFee </th>
			<th> taxes </th>
			<th> paymentType </th>
			<th> paidDate </th>
			<th> notes </th>
			<th> taxRate </th>
			<th> taxStatus_id </th>
			<th> status_id </th>

</tr>
</thead>
<tbody>
{{#order}}
	<tr>
		{{#.}}
			<td><a href='/DURC/order/{{id}}'>{{id}}</a></td>
			<td>{{employee_id_DURClabel}} ({{employee_id}}) </td>			<td>{{customer_id_DURClabel}} ({{customer_id}}) </td>			<td>{{orderDate}}</td>
			<td>{{shippedDate}}</td>
			<td>{{shipper_id_DURClabel}} ({{shipper_id}}) </td>			<td>{{shipName}}</td>
			<td>{{shipAddress}}</td>
			<td>{{shipCity}}</td>
			<td>{{shipStateProvince}}</td>
			<td>{{shipZipPostalCode}}</td>
			<td>{{shipCountryRegion}}</td>
			<td>{{shippingFee}}</td>
			<td>{{taxes}}</td>
			<td>{{paymentType}}</td>
			<td>{{paidDate}}</td>
			<td>{{notes}}</td>
			<td>{{taxRate}}</td>
			<td>{{taxStatus_id_DURClabel}} ({{taxStatus_id}}) </td>			<td>{{status_id_DURClabel}} ({{status_id}}) </td>
		{{/.}}
	</tr>
{{/order}}
</tbody>
</table>
</div></div> <!-- end order card-->
</div></div> <!--end belongs to card-->
<br>

    <script type='text/javascript'>

        // These function control the spinner display when loading many remote entities
        let loading_queue = [];
        function add_to_loading_queue(element) {
            if (loading_queue.length == 0) {
                $('#loader').modal();
            }
            loading_queue.push(element);
        }

        function remove_from_loading_queue(element) {
            const index = loading_queue.indexOf(element);
            if (index >= 0) {
              loading_queue.splice(index, 1);
            }
            if (loading_queue.length == 0) {
                $('#loader').modal('hide');
            }
        }

    // This javascript controls the null checkboxes
        $(document).ready(function() {

            // keep an assoc array of the last entered values
            let last_null_values = {};

            $('.null-checkbox').change(function(e) {

                // get the id of the element we're next to
                let id = $(this).attr('data-elem');

                // store current value, and set to null
                if ($(this).prop('checked')) {
                    let c = confirm("Are you sure you want to overwrite this value with NULL?");
                    if (c === true) {
                        last_null_values[id]= $('#'+id).val();
                        $('#'+id).val(null);
                        $('#'+id).attr('readonly', true);
                    }
                } else {
                    $('#'+id).val(last_null_values[id]);
                    $('#'+id).attr('readonly', false);
                }
            });

            // If a field with a nulllable class is clicked, unset the null checkbox and unlock field
            $('.nullable').click(function(e) {
                let checkboxId = '#' + $(this).attr('id') + 'Null';
                if ($(checkboxId).prop('checked')) {
                    // Uncheck the null box and clear read-only by triggering change
                    $(checkboxId).prop('checked', '');
                    $(checkboxId).change();
                }
            });

            // Trigger change on page load. If the null box is checked, mark field readonly
            // If the null checkbox isn't checked, but the value is empty string, check null
            // checkbox and also mark readonly
            $('.null-checkbox').each(function() {
                let id = $(this).attr('data-elem');
                if ($(this).prop('checked')) {
                    // The null box is checked
                    $('#'+id).attr('readonly', true);
                } else if (!$(this).prop('checked') &&
                    $('#'+id).val() == '') {
                    // The null box is not checked, but the value is empty
                    // Check the null box
                    $(this).prop('checked', 'checked');
                    $('#'+id).attr('readonly', true);
                }
            });
        });
    </script>
