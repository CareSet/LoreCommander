
{{#has_session_status}}
<div class='alert alert-info' role='alert'>
  {{session_status}}
</div>
{{/has_session_status}}

<div id='delete-success-alert' class='alert alert-success' role='alert' style='display: none;'>
                You have successfully deleted this record. This was a hard delete, no going back. But you can save again if you want.. 
            </div>

{{#is_new}}
<form action='/DURC/purchaseorderdetail' method='POST'>
{{/is_new}}

{{^is_new}}
<form action='/DURC/purchaseorderdetail/{{id}}' method='POST'>
    <input type='hidden' name='_method' value='PUT'>
{{/is_new}}

	<h1>purchaseorderdetail</h1>
<div class='card'>
  <div class='card-header'>
<h4> {{durc_instance_name}}</h4>
<ul>
<li> <a href='/Zermelo/DURC_purchaseorderdetail/'>Return to purchaseorderdetail list</a> </li>
{{^is_new}}
<li> <a href='/DURC/purchaseorderdetail/create'>Create new purchaseorderdetail </a> </li>
{{/is_new}}
</ul>
  </div>
<div class='card-body'>

  <fieldset>
    <legend>Edit {{durc_instance_name}}  </legend>
	<input type='hidden' name='_token' value='{{csrf_token}}'>
	
  <div class='form-group row {{id_row_class}}'>
    <label for='id' class='col-sm-4 col-form-label'>id</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.id.has_errors}}is-invalid{{/errors.id.has_errors}}' id='id' name='id' placeholder='' value='{{id}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.id.messages}}<li>{{.}}</li>{{/errors.id.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{purchaseOrder_id_row_class}}'>
    <label for='purchaseOrder_id' class='col-sm-4 col-form-label'>purchaseOrder_id</label>
    <div class='col-sm-7'>
	Current id value: {{purchaseOrder_id}} (see below for lookup value)<br>
	<select class='select2_purchaseOrder_id form-control' id='purchaseOrder_id' name='purchaseOrder_id'  >
	<option value='{{purchaseOrder_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('purchaseOrder_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#purchaseOrder_id option:selected');
    const purchaseOrderId = element.val();
    let purchaseOrderIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/purchaseOrder/' + purchaseOrderId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        purchaseOrderIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_purchaseOrder_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/purchaseOrder',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-purchaseOrder_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('purchaseOrder_id');
        if (purchaseOrderIdHasError === true) {
            $('#select2-purchaseOrder_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{product_id_row_class}}'>
    <label for='product_id' class='col-sm-4 col-form-label'>product_id</label>
    <div class='col-sm-7'>
	Current id value: {{product_id}} (see below for lookup value)<br>
	<select class='select2_product_id form-control' id='product_id' name='product_id'  >
	<option value='{{product_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('product_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#product_id option:selected');
    const productId = element.val();
    let productIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/product/' + productId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        productIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_product_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/product',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-product_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('product_id');
        if (productIdHasError === true) {
            $('#select2-product_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{quantity_row_class}}'>
    <label for='quantity' class='col-sm-4 col-form-label'>quantity</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.quantity.has_errors}}is-invalid{{/errors.quantity.has_errors}}' id='quantity' name='quantity' placeholder='' value='{{quantity}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.quantity.messages}}<li>{{.}}</li>{{/errors.quantity.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{unitCost_row_class}}'>
    <label for='unitCost' class='col-sm-4 col-form-label'>unitCost</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.unitCost.has_errors}}is-invalid{{/errors.unitCost.has_errors}}' id='unitCost' name='unitCost' placeholder='' value='{{unitCost}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.unitCost.messages}}<li>{{.}}</li>{{/errors.unitCost.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{dateReceived_row_class}}'>
    <label for='dateReceived' class='col-sm-4 col-form-label'>dateReceived</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.dateReceived.has_errors}}is-invalid{{/errors.dateReceived.has_errors}}' id='dateReceived' name='dateReceived' placeholder='NULL' value='{{dateReceived}}' >

<button type='button' class='btn btn-primary' id='dateReceived_FontPicker'>
<img src='/css/ic_today_black_24dp_1x.png'> 
</button>
<button type='button' class='btn btn-primary' id='dateReceived_TodayNow'> Today and Now</button>
<div class='invalid-feedback'>
  <ul>
  {{#errors.dateReceived.messages}}<li>{{.}}</li>{{/errors.dateReceived.messages}}
  </ul>
</div><script>
	var dateReceivedConv = new AnyTime.Converter({format: '%Y-%m-%d %T'});
  	$('#dateReceived_TodayNow').click( function(e) {
      		$('#dateReceived').val(dateReceivedConv.format(new Date())).change(); } );

    	$('#dateReceived_FontPicker').click(
      		function(e) {
        		$('#dateReceived').AnyTime_noPicker().AnyTime_picker(
				{
    					format: '%Y-%m-%d %T',
    					formatUtcOffset: '%: (%@)'
				} 
			).focus();
        	e.preventDefault();
        	} );
</script>

    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='dateReceived' name='dateReceivedNull' id='dateReceivedNull' value='dateReceivedNull' {{dateReceived_checked}}>
                    <label class='form-check-label' for='dateReceivedNull'>null</label>
                </div></div>
  <div class='form-group row {{postedToInventory_row_class}}'>
    <label for='postedToInventory' class='col-sm-4 col-form-label'>postedToInventory</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.postedToInventory.has_errors}}is-invalid{{/errors.postedToInventory.has_errors}}' id='postedToInventory' name='postedToInventory' placeholder='0' value='{{postedToInventory}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.postedToInventory.messages}}<li>{{.}}</li>{{/errors.postedToInventory.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{inventory_id_row_class}}'>
    <label for='inventory_id' class='col-sm-4 col-form-label'>inventory_id</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.inventory_id.has_errors}}is-invalid{{/errors.inventory_id.has_errors}}' id='inventory_id' name='inventory_id' placeholder='NULL' value='{{inventory_id}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.inventory_id.messages}}<li>{{.}}</li>{{/errors.inventory_id.messages}}
          </ul>
       </div>
    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='inventory_id' name='inventory_idNull' id='inventory_idNull' value='inventory_idNull' {{inventory_id_checked}}>
                    <label class='form-check-label' for='inventory_idNull'>null</label>
                </div></div>
  <div class='form-group row'>
    <div class='col-sm-8'>
      <button type='submit' class='btn btn-primary'>Save Data</button>
    </div>
  </div>
  
</fieldset>
</div></div>
</form>
<br>
  <div class='form-group row'>
              <div class='col-sm-12 text-right'>

<form action='/DURC/purchaseorderdetail/{{id}}' method='POST'>
    	<input type='hidden' name='_method' value='DELETE'>
	<input type='hidden' name='_token' value='{{csrf_token}}'>

              <button type='button' data-id='{{id}}' data-controller='purchaseorderdetail' class='do-soft-delete btn btn-outline-danger'>Hard Delete purchaseorderdetail</button>
</form>
              </div>
            </div>


<br>
<div class='card'>
  <div class='card-header'>
    Belongs To Relationships
  </div>
<div class='card-body'>

<div class='card'>
  <div class='card-header'>
    purchaseorder ( <a href='/DURC/purchaseorder/'>see all</a> )
{{^purchaseorder}}
(no values)
{{/purchaseorder}}
  </div>
<div class='card-body'>
<table id='table_purchaseorder' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> id </th>
			<th> supplier_id </th>
			<th> createdBy_employee_id </th>
			<th> submittedDate </th>
			<th> creationDate </th>
			<th> status_id </th>
			<th> expectedDate </th>
			<th> shippingFee </th>
			<th> taxes </th>
			<th> paymentDate </th>
			<th> paymentAmount </th>
			<th> paymentMethod </th>
			<th> notes </th>
			<th> approvedBy_employee_id </th>
			<th> approvedDate </th>
			<th> submittedBy_employee_id </th>

</tr>
</thead>
<tbody>
{{#purchaseorder}}
	<tr>
		{{#.}}
			<td><a href='/DURC/purchaseorder/{{id}}'>{{id}}</a></td>
			<td>{{supplier_id_DURClabel}} ({{supplier_id}}) </td>			<td>{{createdBy_employee_id_DURClabel}} ({{createdBy_employee_id}}) </td>			<td>{{submittedDate}}</td>
			<td>{{creationDate}}</td>
			<td>{{status_id_DURClabel}} ({{status_id}}) </td>			<td>{{expectedDate}}</td>
			<td>{{shippingFee}}</td>
			<td>{{taxes}}</td>
			<td>{{paymentDate}}</td>
			<td>{{paymentAmount}}</td>
			<td>{{paymentMethod}}</td>
			<td>{{notes}}</td>
			<td>{{approvedBy_employee_id_DURClabel}} ({{approvedBy_employee_id}}) </td>			<td>{{approvedDate}}</td>
			<td>{{submittedBy_employee_id_DURClabel}} ({{submittedBy_employee_id}}) </td>		
		{{/.}}
	</tr>
{{/purchaseorder}}
</tbody>
</table>
</div></div> <!-- end purchaseorder card-->

<div class='card'>
  <div class='card-header'>
    product ( <a href='/DURC/product/'>see all</a> )
{{^product}}
(no values)
{{/product}}
  </div>
<div class='card-body'>
<table id='table_product' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> supplier_ids </th>
			<th> id </th>
			<th> productCode </th>
			<th> productName </th>
			<th> description </th>
			<th> standardCost </th>
			<th> listPrice </th>
			<th> reorderLevel </th>
			<th> targetLevel </th>
			<th> quantityPerUnit </th>
			<th> discontinued </th>
			<th> minimumReorderQuantity </th>
			<th> category </th>
			<th> attachments </th>

</tr>
</thead>
<tbody>
{{#product}}
	<tr>
		{{#.}}
			<td>{{supplier_ids}}</td>
			<td><a href='/DURC/product/{{id}}'>{{id}}</a></td>
			<td>{{productCode}}</td>
			<td>{{productName}}</td>
			<td>{{description}}</td>
			<td>{{standardCost}}</td>
			<td>{{listPrice}}</td>
			<td>{{reorderLevel}}</td>
			<td>{{targetLevel}}</td>
			<td>{{quantityPerUnit}}</td>
			<td>{{discontinued}}</td>
			<td>{{minimumReorderQuantity}}</td>
			<td>{{category}}</td>
			<td>{{attachments}}</td>
		
		{{/.}}
	</tr>
{{/product}}
</tbody>
</table>
</div></div> <!-- end product card-->
</div></div> <!--end belongs to card-->
<br>
    
    <script type='text/javascript'>
    
        // These function control the spinner display when loading many remote entities
        let loading_queue = [];
        function add_to_loading_queue(element) {
            if (loading_queue.length == 0) {
                $('#loader').modal();
            }
            loading_queue.push(element);
        }

        function remove_from_loading_queue(element) {
            const index = loading_queue.indexOf(element);
            if (index >= 0) {
              loading_queue.splice(index, 1);
            }
            if (loading_queue.length == 0) {
                $('#loader').modal('hide');
            }
        }
        
    // This javascript controls the null checkboxes
        $(document).ready(function() {
            
            // keep an assoc array of the last entered values
            let last_null_values = {};
            
            $('.null-checkbox').change(function(e) {

                // get the id of the element we're next to
                let id = $(this).attr('data-elem');

                // store current value, and set to null
                if ($(this).prop('checked')) {
                    let c = confirm("Are you sure you want to overwrite this value with NULL?");
                    if (c === true) {
                        last_null_values[id]= $('#'+id).val();
                        $('#'+id).val(null);
                        $('#'+id).attr('readonly', true);
                    }
                } else {
                    $('#'+id).val(last_null_values[id]);
                    $('#'+id).attr('readonly', false);
                }
            });
            
            // If a field with a nulllable class is clicked, unset the null checkbox and unlock field
            $('.nullable').click(function(e) {
                let checkboxId = '#' + $(this).attr('id') + 'Null';
                if ($(checkboxId).prop('checked')) {
                    // Uncheck the null box and clear read-only by triggering change
                    $(checkboxId).prop('checked', '');
                    $(checkboxId).change();
                }               
            });
            
            // Trigger change on page load. If the null box is checked, mark field readonly
            // If the null checkbox isn't checked, but the value is empty string, check null 
            // checkbox and also mark readonly
            $('.null-checkbox').each(function() {
                let id = $(this).attr('data-elem');
                if ($(this).prop('checked')) {
                    // The null box is checked
                    $('#'+id).attr('readonly', true);
                } else if (!$(this).prop('checked') &&
                    $('#'+id).val() == '') {
                    // The null box is not checked, but the value is empty
                    // Check the null box
                    $(this).prop('checked', 'checked');
                    $('#'+id).attr('readonly', true);
                }
            });
        });
    </script>
