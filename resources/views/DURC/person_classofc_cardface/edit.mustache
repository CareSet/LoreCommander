
{{#has_session_status}}
<div class='alert alert-info' role='alert'>
  {{session_status}}
</div>
{{/has_session_status}}

<div id='delete-success-alert' class='alert alert-success' role='alert' style='display: none;'>
                You have successfully deleted this record. This was a hard delete, no going back. But you can save again if you want.. 
            </div>

{{#is_new}}
<form action='/DURC/person_classofc_cardface' method='POST'>
{{/is_new}}

{{^is_new}}
<form action='/DURC/person_classofc_cardface/{{id}}' method='POST'>
    <input type='hidden' name='_method' value='PUT'>
{{/is_new}}

	<h1>person_classofc_cardface</h1>
<div class='card'>
  <div class='card-header'>
<h4> {{durc_instance_name}}</h4>
<ul>
<li> <a href='/Zermelo/DURC_person_classofc_cardface/'>Return to person_classofc_cardface list</a> </li>
{{^is_new}}
<li> <a href='/DURC/person_classofc_cardface/create'>Create new person_classofc_cardface </a> </li>
{{/is_new}}
</ul>
  </div>
<div class='card-body'>

  <fieldset>
    <legend>Edit {{durc_instance_name}}  </legend>
	<input type='hidden' name='_token' value='{{csrf_token}}'>
	
  <div class='form-group row {{id_row_class}}'>
    <label for='id' class='col-sm-4 col-form-label'>id</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.id.has_errors}}is-invalid{{/errors.id.has_errors}}' id='id' name='id' placeholder='' value='{{id}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.id.messages}}<li>{{.}}</li>{{/errors.id.messages}}
          </ul>
       </div>
    </div></div>
  <div class='form-group row {{person_id_row_class}}'>
    <label for='person_id' class='col-sm-4 col-form-label'>person_id</label>
    <div class='col-sm-7'>
	Current id value: {{person_id}} (see below for lookup value)<br>
	<select class='select2_person_id form-control' id='person_id' name='person_id'  >
	<option value='{{person_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('person_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#person_id option:selected');
    const personId = element.val();
    let personIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/person/' + personId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        personIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_person_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/person',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-person_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('person_id');
        if (personIdHasError === true) {
            $('#select2-person_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{classofc_id_row_class}}'>
    <label for='classofc_id' class='col-sm-4 col-form-label'>classofc_id</label>
    <div class='col-sm-7'>
	Current id value: {{classofc_id}} (see below for lookup value)<br>
	<select class='select2_classofc_id form-control' id='classofc_id' name='classofc_id'  >
	<option value='{{classofc_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('classofc_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#classofc_id option:selected');
    const classofcId = element.val();
    let classofcIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/classofc/' + classofcId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        classofcIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_classofc_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/classofc',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-classofc_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('classofc_id');
        if (classofcIdHasError === true) {
            $('#select2-classofc_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{cardface_id_row_class}}'>
    <label for='cardface_id' class='col-sm-4 col-form-label'>cardface_id</label>
    <div class='col-sm-7'>
	Current id value: {{cardface_id}} (see below for lookup value)<br>
	<select class='select2_cardface_id form-control' id='cardface_id' name='cardface_id'  >
	<option value='{{cardface_id}}' selected='selected'><!-- Replaced Dynamically with Text from related model --></option>
	</select>
    </div>
  </div>

<script type='text/javascript'>
$(document).ready(function () {
    // Show the loader/spinner
    add_to_loading_queue('cardface_id');
    
    // Get the option element that is currently selected and it's foreign ID
    const element = $('#cardface_id option:selected');
    const cardfaceId = element.val();
    let cardfaceIdHasError = false;
    
    // Use the json API to get the text of the selected element. 
    // We do this dynamically so we don't have to figure out in the controller
    // what elements are select2 elements, and populate from related models
    $.ajax({
        type: 'GET',
        url: '/DURC/json/cardface/' + cardfaceId,
    })
    .done(function(data, textStatus, jqXHR) {
        // data.text has the same text string (formed from concatinating search fields) as
        // the elements in the select list
        element.html(data.text);
    })
    .fail(function(xhr, status, error) {
        // Display the error text
        element.html(JSON.parse(xhr.responseText));
        cardfaceIdHasError = true;
    })
    .always(function (data) {
        // Create the select2 dropdown    
        $('.select2_cardface_id').select2({
          width: '100%',   
          ajax: {
            url: '/DURC/searchjson/cardface',
            dataType: 'json',
            data: function (params) {
                  var query = {
                      q: params.term,
                      page: params.page || 1
                  }
        
                  // Query parameters will be ?search=[term]&page=[page]
                  return query;
              }
          }
        })
        .change(function() {
            // When we change the value, remove the danger class because we assume you pick a valid option.
            $('#select2-cardface_id-container').removeClass('text-danger');
        });
        
        // Hide the loader/spinner after the select2 has been built
        remove_from_loading_queue('cardface_id');
        if (cardfaceIdHasError === true) {
            $('#select2-cardface_id-container').addClass('text-danger');
        }
    });
});

</script>


  <div class='form-group row {{is_bulk_linker_row_class}}'>
    <div class='col-sm-4'><label>is_bulk_linker</label></div>
    <div class='col-sm-7'>
        <div class='checkbox'>
            <input type='checkbox' id='is_bulk_linker' class='{{#errors.is_bulk_linker.has_errors}}is-invalid{{/errors.is_bulk_linker.has_errors}}'name='is_bulk_linker' {{is_bulk_linker}}  >
            <div class='invalid-feedback'>
                <ul>
                  {{#errors.is_bulk_linker.messages}}<li>{{.}}</li>{{/errors.is_bulk_linker.messages}}
                </ul>
            </div>
       </div> 
    </div>
  </div>

  <div class='form-group row {{link_note_row_class}}'>
    <label for='link_note' class='col-sm-4 col-form-label'>link_note</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control nullable {{#errors.link_note.has_errors}}is-invalid{{/errors.link_note.has_errors}}' id='link_note' name='link_note' placeholder='NULL' value='{{link_note}}' >
      <div class='invalid-feedback'>
          <ul>
          {{#errors.link_note.messages}}<li>{{.}}</li>{{/errors.link_note.messages}}
          </ul>
       </div>
    </div><div class='col-sm-1'>
                    <input class='form-check-input null-checkbox' type='checkbox' data-elem='link_note' name='link_noteNull' id='link_noteNull' value='link_noteNull' {{link_note_checked}}>
                    <label class='form-check-label' for='link_noteNull'>null</label>
                </div></div>
  <div class='form-group row {{created_at_row_class}}'>
    <label for='created_at' class='col-sm-4 col-form-label'>created_at</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.created_at.has_errors}}is-invalid{{/errors.created_at.has_errors}}' id='created_at' name='created_at' placeholder='current_timestamp()' value='{{created_at}}' >

<button type='button' class='btn btn-primary' id='created_at_FontPicker'>
<img src='/css/ic_today_black_24dp_1x.png'> 
</button>
<button type='button' class='btn btn-primary' id='created_at_TodayNow'> Today and Now</button>
<div class='invalid-feedback'>
  <ul>
  {{#errors.created_at.messages}}<li>{{.}}</li>{{/errors.created_at.messages}}
  </ul>
</div><script>
	var created_atConv = new AnyTime.Converter({format: '%Y-%m-%d %T'});
  	$('#created_at_TodayNow').click( function(e) {
      		$('#created_at').val(created_atConv.format(new Date())).change(); } );

    	$('#created_at_FontPicker').click(
      		function(e) {
        		$('#created_at').AnyTime_noPicker().AnyTime_picker(
				{
    					format: '%Y-%m-%d %T',
    					formatUtcOffset: '%: (%@)'
				} 
			).focus();
        	e.preventDefault();
        	} );
</script>

    </div></div>
  <div class='form-group row {{updated_at_row_class}}'>
    <label for='updated_at' class='col-sm-4 col-form-label'>updated_at</label>
    <div class='col-sm-7'>
      <input type='text' class='form-control  {{#errors.updated_at.has_errors}}is-invalid{{/errors.updated_at.has_errors}}' id='updated_at' name='updated_at' placeholder='current_timestamp()' value='{{updated_at}}' >

<button type='button' class='btn btn-primary' id='updated_at_FontPicker'>
<img src='/css/ic_today_black_24dp_1x.png'> 
</button>
<button type='button' class='btn btn-primary' id='updated_at_TodayNow'> Today and Now</button>
<div class='invalid-feedback'>
  <ul>
  {{#errors.updated_at.messages}}<li>{{.}}</li>{{/errors.updated_at.messages}}
  </ul>
</div><script>
	var updated_atConv = new AnyTime.Converter({format: '%Y-%m-%d %T'});
  	$('#updated_at_TodayNow').click( function(e) {
      		$('#updated_at').val(updated_atConv.format(new Date())).change(); } );

    	$('#updated_at_FontPicker').click(
      		function(e) {
        		$('#updated_at').AnyTime_noPicker().AnyTime_picker(
				{
    					format: '%Y-%m-%d %T',
    					formatUtcOffset: '%: (%@)'
				} 
			).focus();
        	e.preventDefault();
        	} );
</script>

    </div></div>
  <div class='form-group row'>
    <div class='col-sm-8'>
      <button type='submit' class='btn btn-primary'>Save Data</button>
    </div>
  </div>
  
</fieldset>
</div></div>
</form>
<br>
  <div class='form-group row'>
              <div class='col-sm-12 text-right'>

<form action='/DURC/person_classofc_cardface/{{id}}' method='POST'>
    	<input type='hidden' name='_method' value='DELETE'>
	<input type='hidden' name='_token' value='{{csrf_token}}'>

              <button type='button' data-id='{{id}}' data-controller='person_classofc_cardface' class='do-soft-delete btn btn-outline-danger'>Hard Delete person_classofc_cardface</button>
</form>
              </div>
            </div>


<br>
<div class='card'>
  <div class='card-header'>
    Belongs To Relationships
  </div>
<div class='card-body'>

<div class='card'>
  <div class='card-header'>
    person ( <a href='/DURC/person/'>see all</a> )
{{^person}}
(no values)
{{/person}}
  </div>
<div class='card-body'>
<table id='table_person' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> id </th>
			<th> last_name </th>
			<th> first_name </th>
			<th> person_blurb </th>
			<th> image_uri </th>
			<th> wallpaper_download_url </th>
			<th> mtgwiki_url </th>
			<th> wizards_story_url </th>
			<th> created_at </th>
			<th> updated_at </th>

</tr>
</thead>
<tbody>
{{#person}}
	<tr>
		{{#.}}
			<td><a href='/DURC/person/{{id}}'>{{id}}</a></td>
			<td>{{last_name}}</td>
			<td>{{first_name}}</td>
			<td>{{person_blurb}}</td>
			<td>{{image_uri}}</td>
			<td>{{wallpaper_download_url}}</td>
			<td>{{mtgwiki_url}}</td>
			<td>{{wizards_story_url}}</td>
			<td>{{created_at}}</td>
			<td>{{updated_at}}</td>
		
		{{/.}}
	</tr>
{{/person}}
</tbody>
</table>
</div></div> <!-- end person card-->

<div class='card'>
  <div class='card-header'>
    classofc ( <a href='/DURC/classofc/'>see all</a> )
{{^classofc}}
(no values)
{{/classofc}}
  </div>
<div class='card-body'>
<table id='table_classofc' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> id </th>
			<th> classofc_name </th>
			<th> classofc_img_uri </th>
			<th> classofc_wiki_url </th>
			<th> is_mega_class </th>
			<th> created_at </th>
			<th> updated_at </th>

</tr>
</thead>
<tbody>
{{#classofc}}
	<tr>
		{{#.}}
			<td><a href='/DURC/classofc/{{id}}'>{{id}}</a></td>
			<td>{{classofc_name}}</td>
			<td>{{classofc_img_uri}}</td>
			<td>{{classofc_wiki_url}}</td>
			<td>{{is_mega_class}}</td>
			<td>{{created_at}}</td>
			<td>{{updated_at}}</td>
		
		{{/.}}
	</tr>
{{/classofc}}
</tbody>
</table>
</div></div> <!-- end classofc card-->

<div class='card'>
  <div class='card-header'>
    cardface ( <a href='/DURC/cardface/'>see all</a> )
{{^cardface}}
(no values)
{{/cardface}}
  </div>
<div class='card-body'>
<table id='table_cardface' class='table table-bordered table-hover table-responsive table-sm'>
<thead>
<tr>
			<th> id </th>
			<th> card_id </th>
			<th> cardface_index </th>
			<th> illustration_id </th>
			<th> artist </th>
			<th> color </th>
			<th> color_identity </th>
			<th> flavor_text </th>
			<th> cardface_image_uri </th>
			<th> mana_cost </th>
			<th> cmc </th>
			<th> name </th>
			<th> oracle_text </th>
			<th> power </th>
			<th> toughness </th>
			<th> type_line </th>
			<th> border_color </th>
			<th> image_uri </th>
			<th> image_uri_art_crop </th>
			<th> image_hash_art_crop </th>
			<th> image_uri_small </th>
			<th> image_hash_small </th>
			<th> image_uri_normal </th>
			<th> image_hash_normal </th>
			<th> image_uri_large </th>
			<th> image_hash_large </th>
			<th> image_uri_png </th>
			<th> image_hash_png </th>
			<th> image_uri_border_crop </th>
			<th> image_hash_border_crop </th>
			<th> is_foil </th>
			<th> is_nonfoil </th>
			<th> is_oversized </th>
			<th> is_color_green </th>
			<th> is_color_red </th>
			<th> is_color_blue </th>
			<th> is_color_black </th>
			<th> is_color_white </th>
			<th> is_colorless </th>
			<th> color_count </th>
			<th> is_color_identity_green </th>
			<th> is_color_identity_red </th>
			<th> is_color_identity_blue </th>
			<th> is_color_identity_black </th>
			<th> is_color_identity_white </th>
			<th> color_identity_count </th>
			<th> is_snow </th>
			<th> has_phyrexian_mana </th>
			<th> for_fulltext_search </th>
			<th> created_at </th>
			<th> updated_at </th>

</tr>
</thead>
<tbody>
{{#cardface}}
	<tr>
		{{#.}}
			<td><a href='/DURC/cardface/{{id}}'>{{id}}</a></td>
			<td>{{card_id_DURClabel}} ({{card_id}}) </td>			<td>{{cardface_index}}</td>
			<td>{{illustration_id_DURClabel}} ({{illustration_id}}) </td>			<td>{{artist}}</td>
			<td>{{color}}</td>
			<td>{{color_identity}}</td>
			<td>{{flavor_text}}</td>
			<td>{{cardface_image_uri}}</td>
			<td>{{mana_cost}}</td>
			<td>{{cmc}}</td>
			<td>{{name}}</td>
			<td>{{oracle_text}}</td>
			<td>{{power}}</td>
			<td>{{toughness}}</td>
			<td>{{type_line}}</td>
			<td>{{border_color}}</td>
			<td>{{image_uri}}</td>
			<td>{{image_uri_art_crop}}</td>
			<td>{{image_hash_art_crop}}</td>
			<td>{{image_uri_small}}</td>
			<td>{{image_hash_small}}</td>
			<td>{{image_uri_normal}}</td>
			<td>{{image_hash_normal}}</td>
			<td>{{image_uri_large}}</td>
			<td>{{image_hash_large}}</td>
			<td>{{image_uri_png}}</td>
			<td>{{image_hash_png}}</td>
			<td>{{image_uri_border_crop}}</td>
			<td>{{image_hash_border_crop}}</td>
			<td>{{is_foil}}</td>
			<td>{{is_nonfoil}}</td>
			<td>{{is_oversized}}</td>
			<td>{{is_color_green}}</td>
			<td>{{is_color_red}}</td>
			<td>{{is_color_blue}}</td>
			<td>{{is_color_black}}</td>
			<td>{{is_color_white}}</td>
			<td>{{is_colorless}}</td>
			<td>{{color_count}}</td>
			<td>{{is_color_identity_green}}</td>
			<td>{{is_color_identity_red}}</td>
			<td>{{is_color_identity_blue}}</td>
			<td>{{is_color_identity_black}}</td>
			<td>{{is_color_identity_white}}</td>
			<td>{{color_identity_count}}</td>
			<td>{{is_snow}}</td>
			<td>{{has_phyrexian_mana}}</td>
			<td>{{for_fulltext_search}}</td>
			<td>{{created_at}}</td>
			<td>{{updated_at}}</td>
		
		{{/.}}
	</tr>
{{/cardface}}
</tbody>
</table>
</div></div> <!-- end cardface card-->
</div></div> <!--end belongs to card-->
<br>
    
    <script type='text/javascript'>
    
        // These function control the spinner display when loading many remote entities
        let loading_queue = [];
        function add_to_loading_queue(element) {
            if (loading_queue.length == 0) {
                $('#loader').modal();
            }
            loading_queue.push(element);
        }

        function remove_from_loading_queue(element) {
            const index = loading_queue.indexOf(element);
            if (index >= 0) {
              loading_queue.splice(index, 1);
            }
            if (loading_queue.length == 0) {
                $('#loader').modal('hide');
            }
        }
        
    // This javascript controls the null checkboxes
        $(document).ready(function() {
            
            // keep an assoc array of the last entered values
            let last_null_values = {};
            
            $('.null-checkbox').change(function(e) {

                // get the id of the element we're next to
                let id = $(this).attr('data-elem');

                // store current value, and set to null
                if ($(this).prop('checked')) {
                    let c = confirm("Are you sure you want to overwrite this value with NULL?");
                    if (c === true) {
                        last_null_values[id]= $('#'+id).val();
                        $('#'+id).val(null);
                        $('#'+id).attr('readonly', true);
                    }
                } else {
                    $('#'+id).val(last_null_values[id]);
                    $('#'+id).attr('readonly', false);
                }
            });
            
            // If a field with a nulllable class is clicked, unset the null checkbox and unlock field
            $('.nullable').click(function(e) {
                let checkboxId = '#' + $(this).attr('id') + 'Null';
                if ($(checkboxId).prop('checked')) {
                    // Uncheck the null box and clear read-only by triggering change
                    $(checkboxId).prop('checked', '');
                    $(checkboxId).change();
                }               
            });
            
            // Trigger change on page load. If the null box is checked, mark field readonly
            // If the null checkbox isn't checked, but the value is empty string, check null 
            // checkbox and also mark readonly
            $('.null-checkbox').each(function() {
                let id = $(this).attr('data-elem');
                if ($(this).prop('checked')) {
                    // The null box is checked
                    $('#'+id).attr('readonly', true);
                } else if (!$(this).prop('checked') &&
                    $('#'+id).val() == '') {
                    // The null box is not checked, but the value is empty
                    // Check the null box
                    $(this).prop('checked', 'checked');
                    $('#'+id).attr('readonly', true);
                }
            });
        });
    </script>
