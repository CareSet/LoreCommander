<?php

namespace App\DURC\Models;

use CareSet\DURC\DURCModel;
use CareSet\DURC\DURC;
/*
	Note this class was auto-generated from 

lore.mtgset by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in mtgset.php 

*/

class mtgset extends DURCModel{

    

    
        // the datbase for this model
        protected $table = 'lore.mtgset';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
			'card', //from from many
		];


	//DURC did not detect any date fields

	public $timestamps = true;
	const UPDATED_AT = 'updated_at';
	const CREATED_AT = 'created_at';
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'scryfall_id' => 'varchar',
		'code' => 'varchar',
		'mtgo_code' => 'varchar',
		'arena_code' => 'varchar',
		'tcgplayer_id' => 'int',
		'name' => 'varchar',
		'set_type' => 'varchar',
		'released_at' => 'date',
		'block_code' => 'varchar',
		'block' => 'varchar',
		'parent_set_code' => 'varchar',
		'card_count' => 'int',
		'is_digital' => 'tinyint',
		'is_foil_only' => 'tinyint',
		'scryfall_uri' => 'varchar',
		'mtgset_uri' => 'varchar',
		'icon_svg_uri' => 'varchar',
		'search_uri' => 'varchar',
		'created_at' => 'datetime',
		'updated_at' => 'datetime',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required form elements
    protected $non_nullable_fields = [
		'id',
		'scryfall_id',
		'code',
		'name',
		'set_type',
		'card_count',
		'is_digital',
		'is_foil_only',
		'scryfall_uri',
		'mtgset_uri',
		'icon_svg_uri',
		'search_uri',
		'created_at',
		'updated_at',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'scryfall_id' => null,
		'code' => null,
		'mtgo_code' => 'NULL',
		'arena_code' => 'NULL',
		'tcgplayer_id' => 'NULL',
		'name' => null,
		'set_type' => null,
		'released_at' => 'NULL',
		'block_code' => 'NULL',
		'block' => 'NULL',
		'parent_set_code' => 'NULL',
		'card_count' => null,
		'is_digital' => null,
		'is_foil_only' => null,
		'scryfall_uri' => null,
		'mtgset_uri' => null,
		'icon_svg_uri' => null,
		'search_uri' => null,
		'created_at' => null,
		'updated_at' => null,
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'scryfall_id' => 'required',
		'code' => 'required',
		'mtgo_code' => 'nullable',
		'arena_code' => 'nullable',
		'tcgplayer_id' => 'integer|nullable',
		'name' => 'required',
		'set_type' => 'required',
		'released_at' => 'nullable',
		'block_code' => 'nullable',
		'block' => 'nullable',
		'parent_set_code' => 'nullable',
		'card_count' => 'integer|required',
		'is_digital' => 'required',
		'is_foil_only' => 'required',
		'scryfall_uri' => 'required',
		'mtgset_uri' => 'required',
		'icon_svg_uri' => 'required',
		'search_uri' => 'required',
		'created_at' => 'required',
		'updated_at' => 'required',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getScryfallIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setScryfallIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('scryfall_id', 'varchar', $value, $this);
		$this->attributes['scryfall_id'] = $formatted_value;
	}

	public function getCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('code', 'varchar', $value, $this);
		$this->attributes['code'] = $formatted_value;
	}

	public function getMtgoCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setMtgoCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('mtgo_code', 'varchar', $value, $this);
		$this->attributes['mtgo_code'] = $formatted_value;
	}

	public function getArenaCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setArenaCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('arena_code', 'varchar', $value, $this);
		$this->attributes['arena_code'] = $formatted_value;
	}

	public function getTcgplayerIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTcgplayerIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('tcgplayer_id', 'int', $value, $this);
		$this->attributes['tcgplayer_id'] = $formatted_value;
	}

	public function getNameAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setNameAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('name', 'varchar', $value, $this);
		$this->attributes['name'] = $formatted_value;
	}

	public function getSetTypeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setSetTypeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('set_type', 'varchar', $value, $this);
		$this->attributes['set_type'] = $formatted_value;
	}

	public function getReleasedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setReleasedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('released_at', 'date', $value, $this);
		$this->attributes['released_at'] = $formatted_value;
	}

	public function getBlockCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setBlockCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('block_code', 'varchar', $value, $this);
		$this->attributes['block_code'] = $formatted_value;
	}

	public function getBlockAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setBlockAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('block', 'varchar', $value, $this);
		$this->attributes['block'] = $formatted_value;
	}

	public function getParentSetCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setParentSetCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('parent_set_code', 'varchar', $value, $this);
		$this->attributes['parent_set_code'] = $formatted_value;
	}

	public function getCardCountAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCardCountAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('card_count', 'int', $value, $this);
		$this->attributes['card_count'] = $formatted_value;
	}

	public function getIsDigitalAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIsDigitalAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('is_digital', 'tinyint', $value, $this);
		$this->attributes['is_digital'] = $formatted_value;
	}

	public function getIsFoilOnlyAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIsFoilOnlyAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('is_foil_only', 'tinyint', $value, $this);
		$this->attributes['is_foil_only'] = $formatted_value;
	}

	public function getScryfallUriAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setScryfallUriAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('scryfall_uri', 'varchar', $value, $this);
		$this->attributes['scryfall_uri'] = $formatted_value;
	}

	public function getMtgsetUriAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setMtgsetUriAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('mtgset_uri', 'varchar', $value, $this);
		$this->attributes['mtgset_uri'] = $formatted_value;
	}

	public function getIconSvgUriAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIconSvgUriAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('icon_svg_uri', 'varchar', $value, $this);
		$this->attributes['icon_svg_uri'] = $formatted_value;
	}

	public function getSearchUriAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setSearchUriAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('search_uri', 'varchar', $value, $this);
		$this->attributes['search_uri'] = $formatted_value;
	}

	public function getCreatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCreatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('created_at', 'datetime', $value, $this);
		$this->attributes['created_at'] = $formatted_value;
	}

	public function getUpdatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setUpdatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('updated_at', 'datetime', $value, $this);
		$this->attributes['updated_at'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

/**
*	get all the card for this mtgset
*/
	public function card(){
		return $this->hasMany('App\card','mtgset_id','id');
	}


		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

			//DURC did not detect any belongs_to relationships

//Originating SQL Schema
/*
CREATE TABLE `lore`.`mtgset` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `scryfall_id` varchar(255) NOT NULL,
  `code` varchar(10) NOT NULL,
  `mtgo_code` varchar(255) DEFAULT NULL,
  `arena_code` varchar(255) DEFAULT NULL,
  `tcgplayer_id` int(11) DEFAULT NULL,
  `name` varchar(255) NOT NULL,
  `set_type` varchar(255) NOT NULL,
  `released_at` date DEFAULT NULL,
  `block_code` varchar(255) DEFAULT NULL,
  `block` varchar(255) DEFAULT NULL,
  `parent_set_code` varchar(255) DEFAULT NULL,
  `card_count` int(11) NOT NULL,
  `is_digital` tinyint(1) NOT NULL,
  `is_foil_only` tinyint(1) NOT NULL,
  `scryfall_uri` varchar(255) NOT NULL,
  `mtgset_uri` varchar(255) NOT NULL,
  `icon_svg_uri` varchar(255) NOT NULL,
  `search_uri` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `scryfall_id` (`scryfall_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8
*/


}//end of mtgset