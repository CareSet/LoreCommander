<?php

namespace App\DURC\Models;

use CareSet\DURC\DURCModel;
use CareSet\DURC\DURC;
/*
	Note this class was auto-generated from 

DURC_northwind_data.order by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in order.php 

*/

class order extends DURCModel{

    

    
        // the datbase for this model
        protected $table = 'DURC_northwind_data.order';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
			'invoice', //from from many
			'orderdetail', //from from many
			'employee', //from belongs to
			'customer', //from belongs to
			'shipper', //from belongs to
		];


	//DURC did not detect any date fields

	public $timestamps = false;
	//DURC NOTE: did not find updated_at and created_at fields for this model

	
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'employee_id' => 'int',
		'customer_id' => 'int',
		'orderDate' => 'datetime',
		'shippedDate' => 'datetime',
		'shipper_id' => 'int',
		'shipName' => 'varchar',
		'shipAddress' => 'longtext',
		'shipCity' => 'varchar',
		'shipStateProvince' => 'varchar',
		'shipZipPostalCode' => 'varchar',
		'shipCountryRegion' => 'varchar',
		'shippingFee' => 'decimal',
		'taxes' => 'decimal',
		'paymentType' => 'varchar',
		'paidDate' => 'datetime',
		'notes' => 'longtext',
		'taxRate' => 'double',
		'taxStatus_id' => 'tinyint',
		'status_id' => 'tinyint',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required form elements
    protected $non_nullable_fields = [
		'id',
		'orderDate',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'employee_id' => 'NULL',
		'customer_id' => 'NULL',
		'orderDate' => 'current_timestamp()',
		'shippedDate' => 'NULL',
		'shipper_id' => 'NULL',
		'shipName' => 'NULL',
		'shipAddress' => 'NULL',
		'shipCity' => 'NULL',
		'shipStateProvince' => 'NULL',
		'shipZipPostalCode' => 'NULL',
		'shipCountryRegion' => 'NULL',
		'shippingFee' => '0.0000',
		'taxes' => '0.0000',
		'paymentType' => 'NULL',
		'paidDate' => 'NULL',
		'notes' => 'NULL',
		'taxRate' => '0',
		'taxStatus_id' => 'NULL',
		'status_id' => '0',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'employee_id' => 'integer|nullable',
		'customer_id' => 'integer|nullable',
		'shippedDate' => 'nullable',
		'shipper_id' => 'integer|nullable',
		'shipName' => 'nullable',
		'shipAddress' => 'nullable',
		'shipCity' => 'nullable',
		'shipStateProvince' => 'nullable',
		'shipZipPostalCode' => 'nullable',
		'shipCountryRegion' => 'nullable',
		'shippingFee' => 'nullable',
		'taxes' => 'nullable',
		'paymentType' => 'nullable',
		'paidDate' => 'nullable',
		'notes' => 'nullable',
		'taxRate' => 'nullable',
		'taxStatus_id' => 'nullable',
		'status_id' => 'nullable',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getEmployeeIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setEmployeeIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('employee_id', 'int', $value, $this);
		$this->attributes['employee_id'] = $formatted_value;
	}

	public function getCustomerIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCustomerIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('customer_id', 'int', $value, $this);
		$this->attributes['customer_id'] = $formatted_value;
	}

	public function getOrderDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setOrderDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('orderDate', 'datetime', $value, $this);
		$this->attributes['orderDate'] = $formatted_value;
	}

	public function getShippedDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShippedDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shippedDate', 'datetime', $value, $this);
		$this->attributes['shippedDate'] = $formatted_value;
	}

	public function getShipperIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipperIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipper_id', 'int', $value, $this);
		$this->attributes['shipper_id'] = $formatted_value;
	}

	public function getShipNameAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipNameAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipName', 'varchar', $value, $this);
		$this->attributes['shipName'] = $formatted_value;
	}

	public function getShipAddressAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipAddressAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipAddress', 'longtext', $value, $this);
		$this->attributes['shipAddress'] = $formatted_value;
	}

	public function getShipCityAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipCityAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipCity', 'varchar', $value, $this);
		$this->attributes['shipCity'] = $formatted_value;
	}

	public function getShipStateProvinceAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipStateProvinceAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipStateProvince', 'varchar', $value, $this);
		$this->attributes['shipStateProvince'] = $formatted_value;
	}

	public function getShipZipPostalCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipZipPostalCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipZipPostalCode', 'varchar', $value, $this);
		$this->attributes['shipZipPostalCode'] = $formatted_value;
	}

	public function getShipCountryRegionAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShipCountryRegionAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipCountryRegion', 'varchar', $value, $this);
		$this->attributes['shipCountryRegion'] = $formatted_value;
	}

	public function getShippingFeeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShippingFeeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shippingFee', 'decimal', $value, $this);
		$this->attributes['shippingFee'] = $formatted_value;
	}

	public function getTaxesAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTaxesAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('taxes', 'decimal', $value, $this);
		$this->attributes['taxes'] = $formatted_value;
	}

	public function getPaymentTypeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setPaymentTypeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('paymentType', 'varchar', $value, $this);
		$this->attributes['paymentType'] = $formatted_value;
	}

	public function getPaidDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setPaidDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('paidDate', 'datetime', $value, $this);
		$this->attributes['paidDate'] = $formatted_value;
	}

	public function getNotesAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setNotesAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('notes', 'longtext', $value, $this);
		$this->attributes['notes'] = $formatted_value;
	}

	public function getTaxRateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTaxRateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('taxRate', 'double', $value, $this);
		$this->attributes['taxRate'] = $formatted_value;
	}

	public function getTaxStatusIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTaxStatusIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('taxStatus_id', 'tinyint', $value, $this);
		$this->attributes['taxStatus_id'] = $formatted_value;
	}

	public function getStatusIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setStatusIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('status_id', 'tinyint', $value, $this);
		$this->attributes['status_id'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

/**
*	get all the invoice for this order
*/
	public function invoice(){
		return $this->hasMany('App\invoice','order_id','id');
	}


/**
*	get all the orderdetail for this order
*/
	public function orderdetail(){
		return $this->hasMany('App\orderdetail','order_id','id');
	}


		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

/**
*	get the single employee for this order
*/
	public function employee(){
		return $this->belongsTo('App\employee','employee_id','id');
	}


/**
*	get the single customer for this order
*/
	public function customer(){
		return $this->belongsTo('App\customer','customer_id','id');
	}


/**
*	get the single shipper for this order
*/
	public function shipper(){
		return $this->belongsTo('App\shipper','shipper_id','id');
	}



//Originating SQL Schema
/*
CREATE TABLE `DURC_northwind_data`.`order` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `employee_id` int(11) DEFAULT NULL,
  `customer_id` int(11) DEFAULT NULL,
  `orderDate` datetime NOT NULL DEFAULT current_timestamp(),
  `shippedDate` datetime DEFAULT NULL,
  `shipper_id` int(11) DEFAULT NULL,
  `shipName` varchar(50) DEFAULT NULL,
  `shipAddress` longtext DEFAULT NULL,
  `shipCity` varchar(50) DEFAULT NULL,
  `shipStateProvince` varchar(50) DEFAULT NULL,
  `shipZipPostalCode` varchar(50) DEFAULT NULL,
  `shipCountryRegion` varchar(50) DEFAULT NULL,
  `shippingFee` decimal(19,4) DEFAULT 0.0000,
  `taxes` decimal(19,4) DEFAULT 0.0000,
  `paymentType` varchar(50) DEFAULT NULL,
  `paidDate` datetime DEFAULT NULL,
  `notes` longtext DEFAULT NULL,
  `taxRate` double DEFAULT 0,
  `taxStatus_id` tinyint(4) DEFAULT NULL,
  `status_id` tinyint(4) DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `customer_id` (`customer_id`),
  KEY `employee_id` (`employee_id`),
  KEY `id` (`id`),
  KEY `shipper_id` (`shipper_id`),
  KEY `taxStatus` (`taxStatus_id`),
  KEY `shipZipPostalCode` (`shipZipPostalCode`),
  KEY `fkOrderOrderStatus1` (`status_id`),
  CONSTRAINT `fkOrderCustomers` FOREIGN KEY (`customer_id`) REFERENCES `northwind_model`.`customer` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkOrderEmployees1` FOREIGN KEY (`employee_id`) REFERENCES `northwind_model`.`employee` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkOrderOrderStatus1` FOREIGN KEY (`status_id`) REFERENCES `northwind_model`.`orderStatus` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkOrderOrderTaxStatus1` FOREIGN KEY (`taxStatus_id`) REFERENCES `northwind_model`.`orderTaxStatus` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkOrderShippers1` FOREIGN KEY (`shipper_id`) REFERENCES `northwind_model`.`shipper` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB  DEFAULT CHARSET=utf8
*/


}//end of order