<?php

namespace App\DURC\Models;

use CareSet\DURC\DURCModel;
use CareSet\DURC\DURC;
/*
	Note this class was auto-generated from 

DURC_northwind_data.invoice by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in invoice.php 

*/

class invoice extends DURCModel{

    

    
        // the datbase for this model
        protected $table = 'DURC_northwind_data.invoice';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
			'order', //from belongs to
		];


	//DURC did not detect any date fields

	public $timestamps = false;
	//DURC NOTE: did not find updated_at and created_at fields for this model

	
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'order_id' => 'int',
		'invoiceDate' => 'datetime',
		'dueDate' => 'datetime',
		'tax' => 'decimal',
		'shipping' => 'decimal',
		'amountDue' => 'decimal',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required/present form elements
    protected $non_nullable_fields = [
		'id',
		'invoiceDate',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'order_id' => 'NULL',
		'invoiceDate' => 'current_timestamp()',
		'dueDate' => 'NULL',
		'tax' => '0.0000',
		'shipping' => '0.0000',
		'amountDue' => '0.0000',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'order_id' => 'integer|nullable',
		'dueDate' => 'nullable',
		'tax' => 'nullable',
		'shipping' => 'nullable',
		'amountDue' => 'nullable',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getOrderIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setOrderIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('order_id', 'int', $value, $this);
		$this->attributes['order_id'] = $formatted_value;
	}

	public function getInvoiceDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setInvoiceDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('invoiceDate', 'datetime', $value, $this);
		$this->attributes['invoiceDate'] = $formatted_value;
	}

	public function getDueDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setDueDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('dueDate', 'datetime', $value, $this);
		$this->attributes['dueDate'] = $formatted_value;
	}

	public function getTaxAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTaxAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('tax', 'decimal', $value, $this);
		$this->attributes['tax'] = $formatted_value;
	}

	public function getShippingAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setShippingAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('shipping', 'decimal', $value, $this);
		$this->attributes['shipping'] = $formatted_value;
	}

	public function getAmountDueAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setAmountDueAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('amountDue', 'decimal', $value, $this);
		$this->attributes['amountDue'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

			//DURC did not detect any has_many relationships
		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

/**
*	get the single order for this invoice
*/
	public function order(){
		return $this->belongsTo('App\order','order_id','id');
	}



//Originating SQL Schema
/*
CREATE TABLE `DURC_northwind_data`.`invoice` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) DEFAULT NULL,
  `invoiceDate` datetime NOT NULL DEFAULT current_timestamp(),
  `dueDate` datetime DEFAULT NULL,
  `tax` decimal(19,4) DEFAULT 0.0000,
  `shipping` decimal(19,4) DEFAULT 0.0000,
  `amountDue` decimal(19,4) DEFAULT 0.0000,
  PRIMARY KEY (`id`),
  KEY `id` (`id`),
  KEY `fkInvoicesOrder1_idx` (`order_id`),
  CONSTRAINT `fkInvoicesOrder1` FOREIGN KEY (`order_id`) REFERENCES `northwind_model`.`order` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB  DEFAULT CHARSET=utf8
*/


}//end of invoice