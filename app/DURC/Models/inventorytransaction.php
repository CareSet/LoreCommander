<?php

namespace App\DURC\Models;

use CareSet\DURC\DURCModel;
use CareSet\DURC\DURC;
/*
	Note this class was auto-generated from 

DURC_northwind_data.inventoryTransaction by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in inventorytransaction.php 

*/

class inventorytransaction extends DURCModel{

    

    
        // the datbase for this model
        protected $table = 'DURC_northwind_data.inventoryTransaction';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
			'product', //from belongs to
			'purchaseorder', //from belongs to
		];


	//DURC did not detect any date fields

	public $timestamps = false;
	//DURC NOTE: did not find updated_at and created_at fields for this model

	
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'transactionType' => 'tinyint',
		'transactionCreatedDate' => 'datetime',
		'transactionModifiedDate' => 'datetime',
		'product_id' => 'int',
		'quantity' => 'int',
		'purchaseOrder_id' => 'int',
		'customerOrder_id' => 'int',
		'comments' => 'varchar',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required form elements
    protected $non_nullable_fields = [
		'id',
		'transactionType',
		'transactionCreatedDate',
		'transactionModifiedDate',
		'product_id',
		'quantity',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'transactionType' => null,
		'transactionCreatedDate' => 'current_timestamp()',
		'transactionModifiedDate' => 'current_timestamp()',
		'product_id' => null,
		'quantity' => null,
		'purchaseOrder_id' => 'NULL',
		'customerOrder_id' => 'NULL',
		'comments' => 'NULL',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'transactionType' => 'required',
		'product_id' => 'integer|required',
		'quantity' => 'integer|required',
		'purchaseOrder_id' => 'integer|nullable',
		'customerOrder_id' => 'integer|nullable',
		'comments' => 'nullable',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getTransactionTypeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTransactionTypeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('transactionType', 'tinyint', $value, $this);
		$this->attributes['transactionType'] = $formatted_value;
	}

	public function getTransactionCreatedDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTransactionCreatedDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('transactionCreatedDate', 'datetime', $value, $this);
		$this->attributes['transactionCreatedDate'] = $formatted_value;
	}

	public function getTransactionModifiedDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTransactionModifiedDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('transactionModifiedDate', 'datetime', $value, $this);
		$this->attributes['transactionModifiedDate'] = $formatted_value;
	}

	public function getProductIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setProductIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('product_id', 'int', $value, $this);
		$this->attributes['product_id'] = $formatted_value;
	}

	public function getQuantityAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setQuantityAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('quantity', 'int', $value, $this);
		$this->attributes['quantity'] = $formatted_value;
	}

	public function getPurchaseOrderIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setPurchaseOrderIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('purchaseOrder_id', 'int', $value, $this);
		$this->attributes['purchaseOrder_id'] = $formatted_value;
	}

	public function getCustomerOrderIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCustomerOrderIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('customerOrder_id', 'int', $value, $this);
		$this->attributes['customerOrder_id'] = $formatted_value;
	}

	public function getCommentsAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCommentsAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('comments', 'varchar', $value, $this);
		$this->attributes['comments'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

			//DURC did not detect any has_many relationships
		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

/**
*	get the single product for this inventorytransaction
*/
	public function product(){
		return $this->belongsTo('App\product','product_id','id');
	}


/**
*	get the single purchaseorder for this inventorytransaction
*/
	public function purchaseorder(){
		return $this->belongsTo('App\purchaseorder','purchaseOrder_id','id');
	}



//Originating SQL Schema
/*
CREATE TABLE `DURC_northwind_data`.`inventoryTransaction` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transactionType` tinyint(4) NOT NULL,
  `transactionCreatedDate` datetime NOT NULL DEFAULT current_timestamp(),
  `transactionModifiedDate` datetime NOT NULL DEFAULT current_timestamp(),
  `product_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL,
  `purchaseOrder_id` int(11) DEFAULT NULL,
  `customerOrder_id` int(11) DEFAULT NULL,
  `comments` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `customerOrder_id` (`customerOrder_id`),
  KEY `product_id` (`product_id`),
  KEY `purchaseOrder_id` (`purchaseOrder_id`),
  KEY `transactionType` (`transactionType`),
  CONSTRAINT `fkInventoryTransactionInventoryTransactionType1` FOREIGN KEY (`transactionType`) REFERENCES `northwind_model`.`inventoryTransactionType` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkInventoryTransactionOrder1` FOREIGN KEY (`customerOrder_id`) REFERENCES `order` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkInventoryTransactionProducts1` FOREIGN KEY (`product_id`) REFERENCES `northwind_model`.`product` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fkInventoryTransactionPurchaseOrder1` FOREIGN KEY (`purchaseOrder_id`) REFERENCES `purchaseOrder` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB  DEFAULT CHARSET=utf8
*/


}//end of inventorytransaction