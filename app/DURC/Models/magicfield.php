<?php

namespace App\DURC\Models;
use Illuminate\Database\Eloquent\SoftDeletes;
use CareSet\DURC\DURCModel;
use CareSet\DURC\DURC;
/*
	Note this class was auto-generated from 

DURC_aaa.magicField by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in magicfield.php 

*/

class magicfield extends DURCModel{

    

    use SoftDeletes;

        // the datbase for this model
        protected $table = 'DURC_aaa.magicField';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
		];


	//DURC did not detect any date fields

	public $timestamps = true;
	const UPDATED_AT = 'updated_at';
	const CREATED_AT = 'created_at';
	
	protected $dates = ['deleted_at'];


	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'editsome_markdown' => 'varchar',
		'typesome_sql_code' => 'varchar',
		'typesome_php_code' => 'mediumtext',
		'typesome_python_code' => 'mediumtext',
		'typesome_javascript_code' => 'varchar',
		'this_datetime' => 'datetime',
		'this_date' => 'date',
		'created_at' => 'datetime',
		'updated_at' => 'datetime',
		'deleted_at' => 'datetime',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required/present form elements
    protected $non_nullable_fields = [
		'id',
		'editsome_markdown',
		'typesome_sql_code',
		'typesome_php_code',
		'typesome_python_code',
		'typesome_javascript_code',
		'this_datetime',
		'this_date',
		'created_at',
		'updated_at',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'editsome_markdown' => null,
		'typesome_sql_code' => null,
		'typesome_php_code' => null,
		'typesome_python_code' => null,
		'typesome_javascript_code' => null,
		'this_datetime' => null,
		'this_date' => null,
		'created_at' => 'current_timestamp()',
		'updated_at' => 'current_timestamp()',
		'deleted_at' => 'NULL',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'editsome_markdown' => 'present',
		'typesome_sql_code' => 'present',
		'typesome_php_code' => 'present',
		'typesome_python_code' => 'present',
		'typesome_javascript_code' => 'present',
		'this_datetime' => 'present',
		'this_date' => 'present',
		'deleted_at' => 'nullable',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getEditsomeMarkdownAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setEditsomeMarkdownAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('editsome_markdown', 'varchar', $value, $this);
		$this->attributes['editsome_markdown'] = $formatted_value;
	}

	public function getTypesomeSqlCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTypesomeSqlCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('typesome_sql_code', 'varchar', $value, $this);
		$this->attributes['typesome_sql_code'] = $formatted_value;
	}

	public function getTypesomePhpCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTypesomePhpCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('typesome_php_code', 'mediumtext', $value, $this);
		$this->attributes['typesome_php_code'] = $formatted_value;
	}

	public function getTypesomePythonCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTypesomePythonCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('typesome_python_code', 'mediumtext', $value, $this);
		$this->attributes['typesome_python_code'] = $formatted_value;
	}

	public function getTypesomeJavascriptCodeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setTypesomeJavascriptCodeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('typesome_javascript_code', 'varchar', $value, $this);
		$this->attributes['typesome_javascript_code'] = $formatted_value;
	}

	public function getThisDatetimeAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisDatetimeAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_datetime', 'datetime', $value, $this);
		$this->attributes['this_datetime'] = $formatted_value;
	}

	public function getThisDateAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisDateAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_date', 'date', $value, $this);
		$this->attributes['this_date'] = $formatted_value;
	}

	public function getCreatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCreatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('created_at', 'datetime', $value, $this);
		$this->attributes['created_at'] = $formatted_value;
	}

	public function getUpdatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setUpdatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('updated_at', 'datetime', $value, $this);
		$this->attributes['updated_at'] = $formatted_value;
	}

	public function getDeletedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setDeletedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('deleted_at', 'datetime', $value, $this);
		$this->attributes['deleted_at'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

			//DURC did not detect any has_many relationships
		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

			//DURC did not detect any belongs_to relationships

//Originating SQL Schema
/*
CREATE TABLE `DURC_aaa`.`magicField` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `editsome_markdown` varchar(2000) COLLATE utf8mb4_unicode_ci NOT NULL,
  `typesome_sql_code` varchar(2000) COLLATE utf8mb4_unicode_ci NOT NULL,
  `typesome_php_code` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `typesome_python_code` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `typesome_javascript_code` varchar(3000) COLLATE utf8mb4_unicode_ci NOT NULL,
  `this_datetime` datetime NOT NULL,
  `this_date` date NOT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp(),
  `deleted_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
*/


}//end of magicfield